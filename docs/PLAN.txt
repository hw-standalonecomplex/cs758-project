Author(s): Sean Wilson 

Date Last Modified: 10-30-16

Project Details:

	The Problem:
		OS threads are expensive so green threads provide a solution to this.
		However, since green threads aren't in the kernel, there's no way for
		the kernel to know a thread is "green" and could still be useful when
		said thread executes disk IO.

	Existing Solution: Keep around some extra IO threads.
		- More costs due to extra threads
		- May be costly to wake IO threads
		- Running more threads than cores can mean inopportune context
		  switching before the IO thread even executes the system call
		- If a limit of existing IO threads is reached, either need to spawn
		  more threads (extra cost to IO) or block whole program.


	Proposed Solution:

		Since go gets to abstract away scheduling details from programmers Use
		AIO in place of blocking SIO in go file open/read/write libraries. ie:
		IO could still appear as blocking to a user, just schedule some other
		green thread while AIO is underway. 

		ie: Modify go scheduler to enable use blocking AIO with a SIO
		programmer interface.
	
	Pre-requisite Research (Order of importance) (Possible sources to list)
	======================

		- Linux AIO support, usage, previous benchmarking work?

		- How do blocking linux system calls treat threads? Do they completely
		  deschedule? (I assume so)

		- Benchmarking Linux Systemcalls. How have people done this in the
		  past?  What's the accepted method? perf?

		- Go(/Erlang?) scheduling system


	Step 1 - Quantifying Costs:

		Tasks:

			* How long might we be de-scheduled for?
				- Cost of typical system calls (O/R/W) for various sized files
				  and time to return from syscall
				- Cost of taking a context switch due to SIO

			* How does AIO fair (Compare and contrast with SIO).
				- Cost of AIO systems calls (O/R/W) for various size files and
				  time to return from syscall
				- Cost of responding to interrupts

			Additional Questions:
				- Do different disks/hw with different latencies affect
				  results?
				- Do various level caches affect these latencies? (e.g. async
				  write-back to disk)
				- Do different w/r sizes work better for AIO/SIO types?

		Questions about go:
			* Are go's IO green threads sleeping and specifically woken up to
			  start SIO?

				- If they are sleeping: (I assume so) 
					- Find cost it takes to wake up a thread.

				- If they are not sleeping:
					- Puts more pressure on go scheduler to manage when context
					  switches occur if os threads > hw threads.
					- More memory might be wasted to keep multiple OS thread
					  contexts.
					- Worse cache performance due to context switching,
					  especially if the go program really is the only program
					  running (server/service)
			

		Goal: Confirm or deny our hypothesis that AIO allows better overall
		utilization of a OS thread. TODO: Needs quantification.

			Understand the "sweet spots" of where AIO outperforms SIO and vice
			versa.

			Be able to make a suggestion whether further work should be
			undergone - whether the go scheduler should be profiled for
			modification.

		TODOs:

			* We need to figure out what our idea of "cost" is for performance
			  hits.
				- Do we just want to use the same machine and use time
				  benchmarks?
				- How are we going to time stuff? Particularly kernel stuff?

			* How are we going to account for extra computation done on
			  a thread with AIO?
				- Can test overall completion time of a portion of a program.

			* What task(s) should we benchmark?
				- Probably can start out with a simple made up parallel
				  computation first.  but will we need something more realistic
				  too?

	(Everything after this point is heavily dependant on early work.)

	Step 2 - Profiling Go's Current Implementation:

		Goal: Be able to identify particular use cases where AIO might be able
		to improve the performance of a go application, and where it might
		still perform worse.

	Step 3 - Modifing Go:

		Goal: Modify the go green thread scheduler and file IO system to
			support the same legacy IO interface, but use the linux AIO
			libraries.
	
	Step 4 - Profiling Our Implementation:

		Goal: Definitively be able to say when and if our AIO implementation
		outperforms go's current SIO.


Far Far Future Work:
	- Linux Green Threads Module - Like FUSE for green thread schedulers
